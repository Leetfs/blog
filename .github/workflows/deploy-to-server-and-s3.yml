name: Deploy to server and S3

on:
  push:
    branches:
      - 'main'
    paths:
      - 'docs/**'
      - '.github/workflows/cf.yml'
      - '.github/workflows/deploy-to-server.yml'
      - '.github/workflows/deploy-to-server-and-s3.yml'
      - 'package.json'
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  s3-sync:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
      S3_BUCKET: lee-blog
      S3_ENDPOINT: https://s3.cstcloud.cn
      URL_EXPIRES: 3000000  # 3000000 秒 ≈ 34.7 天

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Upload static files to S3
        run: |
          python3 <<'EOF'
          import os
          import mimetypes
          import boto3

          bucket = os.environ["S3_BUCKET"]
          endpoint = os.environ["S3_ENDPOINT"]

          s3 = boto3.client(
              "s3",
              endpoint_url=endpoint,
              aws_access_key_id=os.environ.get("AWS_ACCESS_KEY_ID"),
              aws_secret_access_key=os.environ.get("AWS_SECRET_ACCESS_KEY"),
          )

          exts = {".jpg", ".jpeg", ".png", ".webp", ".gif", ".svg", ".ico",
                  ".mp4", ".webm", ".ogg"}

          for root, _, files in os.walk("."):
              for fname in files:
                  if os.path.splitext(fname)[1].lower() in exts:
                      fpath = os.path.join(root, fname)
                      key = os.path.relpath(fpath, ".")
                      mime, _ = mimetypes.guess_type(fpath)
                      mime = mime or "application/octet-stream"
                      with open(fpath, "rb") as f:
                          s3.put_object(
                              Bucket=bucket,
                              Key=key,
                              Body=f,
                              ContentType=mime,
                              ContentDisposition="inline"
                          )
                      print(f"Uploaded {fpath} as {key} ({mime})")
          EOF


      - name: Generate pre-signed URLs and replace references
        run: |
          python3 - <<'EOF'
          import os, re, subprocess

          bucket = os.environ['S3_BUCKET']
          endpoint = os.environ['S3_ENDPOINT']
          expires = int(os.environ['URL_EXPIRES'])

          # 遍历静态文件生成预签名 URL
          url_map = {}
          for root, dirs, files in os.walk('.'):
              for file in files:
                  if file.lower().endswith((
                      '.jpg', '.jpeg', '.png', '.webp', '.gif', '.svg', '.ico',
                      '.mp4', '.webm', '.ogg'
                  )):
                      local_path = os.path.join(root, file)
                      key = os.path.relpath(local_path, '.').replace('\\', '/')
                      result = subprocess.run([
                          'aws','s3','presign',
                          f's3://{bucket}/{key}',
                          '--expires-in', str(expires),
                          '--endpoint-url', endpoint
                      ], capture_output=True, text=True)
                      if result.returncode != 0:
                          raise RuntimeError(f"预签名失败 {key}: {result.stderr.strip()}")
                      url = result.stdout.strip()
                      url_map[key] = url
                      print(f"预签名 URL: {key} -> {url}")

          # 只处理 HTML 和 Markdown 文件
          pattern_md = re.compile(r'!\[.*?\]\((.*?)\)')
          pattern_html = re.compile(r'(src|href)=["\'](.*?)["\']')

          replace_exts = ('.html','.md')
          for root, dirs, files in os.walk('.'):
              for file in files:
                  if file.endswith(replace_exts):
                      path = os.path.join(root, file)
                      with open(path,'r',encoding='utf-8') as f:
                          content = f.read()

                      # 替换 Markdown 图片
                      def md_repl(match):
                          src = match.group(1).lstrip('./').replace('\\','/')
                          # 拼接 docs/ 前缀去查字典
                          key = f'docs/{src}' if not src.startswith('docs/') else src
                          url = url_map.get(key)
                          return f'![]({url})' if url else match.group(0)

                      content = pattern_md.sub(md_repl, content)

                      # 替换 HTML src/href
                      def html_repl(match):
                          attr, src = match.groups()
                          src_clean = src.lstrip('./').replace('\\','/')
                          key = f'docs/{src_clean}' if not src_clean.startswith('docs/') else src_clean
                          url = url_map.get(key)
                          return f'{attr}="{url}"' if url else match.group(0)

                      content = pattern_html.sub(html_repl, content)

                      with open(path,'w',encoding='utf-8') as f:
                          f.write(content)
          EOF

      - name: Pack all files including hidden
        run: |
          tar -czf processed.tar.gz docs tsconfig.json uno.config.ts package.json pnpm-lock.yaml .git

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-source
          path: processed.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: s3-sync

    steps:
      - name: Download processed sources
        uses: actions/download-artifact@v4
        with:
          name: processed-source
          path: .

      - name: Extract
        run: tar -xzf processed.tar.gz

      - name: Install pnpm
        uses: pnpm/action-setup@v3

      - name: Install dependencies
        run: pnpm install

      - name: Update theme package
        run: pnpm update @project-trans/vitepress-theme-project-trans@prerelease

      - name: Build project
        run: pnpm run build

      - name: Deploy to Server via SSH rsync
        uses: easingthemes/ssh-deploy@v5.1.0
        with:
          ARGS: "-avz --delete --progress"
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          SOURCE: "docs/.vitepress/dist/"
          TARGET: "/var/www/blog/"
